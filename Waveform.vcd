$version Generated by VerilatedVcd $end
$timescale 1ps $end

 $scope module TOP $end
  $var wire  8 : bus_i [7:0] $end
  $var wire  1 ; clk $end
  $var wire  1 < reset $end
  $scope module top $end
   $var wire  1 ? a_out $end
   $var wire  4 / address_ir [3:0] $end
   $var wire  1 ? b_out $end
   $var wire  8 @ bus_d [7:0] $end
   $var wire  8 : bus_i [7:0] $end
   $var wire  1 ; clk $end
   $var wire  1 ( in_a $end
   $var wire  1 & in_b $end
   $var wire  1 % ir_a $end
   $var wire  4 * ir_i [3:0] $end
   $var wire  1 $ mar_a $end
   $var wire  1 ) out_a $end
   $var wire  1 ' out_b $end
   $var wire  1 ? out_bus $end
   $var wire  1 # pc_a $end
   $var wire  1 < reset $end
   $var wire  8 - to_a [7:0] $end
   $var wire  8 . to_b [7:0] $end
   $var wire  8 , to_ir [7:0] $end
   $var wire  4 + to_ram [3:0] $end
   $scope module areg $end
    $var wire  8 = areg [7:0] $end
    $var wire  8 @ bus_d [7:0] $end
    $var wire  1 ; clk $end
    $var wire  8 - from_ram [7:0] $end
    $var wire  1 ? out_b $end
    $var wire  1 ) ram_in $end
   $upscope $end
   $scope module breg $end
    $var wire  8 > areg [7:0] $end
    $var wire  8 @ bus_d [7:0] $end
    $var wire  1 ; clk $end
    $var wire  8 . from_ram [7:0] $end
    $var wire  1 ? out_b $end
    $var wire  1 ' ram_in $end
   $upscope $end
   $scope module control $end
    $var wire  4 C OP_ADD [3:0] $end
    $var wire  4 F OP_DIV [3:0] $end
    $var wire  4 H OP_HLT [3:0] $end
    $var wire  4 G OP_JMP [3:0] $end
    $var wire  4 A OP_LDA [3:0] $end
    $var wire  4 B OP_LDB [3:0] $end
    $var wire  4 E OP_MUL [3:0] $end
    $var wire  4 D OP_SUB [3:0] $end
    $var wire  1 ? aflag $end
    $var wire  8 @ bus_d [7:0] $end
    $var wire  8 : bus_i [7:0] $end
    $var wire  1 ; clk $end
    $var wire  1 ( in_a $end
    $var wire  1 & in_b $end
    $var wire  1 % ir_a $end
    $var wire  4 * ir_i [3:0] $end
    $var wire  1 $ mar_a $end
    $var wire  1 ) out_a $end
    $var wire  1 ' out_b $end
    $var wire  1 # pc_a $end
    $var wire  1 < reset $end
    $var wire  3 0 stagecount [2:0] $end
   $upscope $end
   $scope module counter $end
    $var wire  8 : bus_i [7:0] $end
    $var wire  1 ; clk $end
    $var wire  4 1 pc [3:0] $end
    $var wire  1 # pc_a $end
    $var wire  1 < reset $end
   $upscope $end
   $scope module ir $end
    $var wire  4 / address [3:0] $end
    $var wire  8 : bus_i [7:0] $end
    $var wire  1 ; clk $end
    $var wire  8 , from_ram [7:0] $end
    $var wire  4 * instruction [3:0] $end
    $var wire  1 % ir_a $end
    $var wire  1 < reset $end
    $var wire  4 * to_ctrl [3:0] $end
    $var wire  4 / to_ram [3:0] $end
   $upscope $end
   $scope module mar $end
    $var wire  4 + address [3:0] $end
    $var wire  8 : bus_i [7:0] $end
    $var wire  1 ; clk $end
    $var wire  4 / from_ir [3:0] $end
    $var wire  1 $ mar_a $end
    $var wire  1 < reset $end
    $var wire  4 + to_ram [3:0] $end
   $upscope $end
   $scope module ram $end
    $var wire  4 / address_ir [3:0] $end
    $var wire  1 ; clk $end
    $var wire  1 ( in_a $end
    $var wire  1 & in_b $end
    $var wire  8 7 index_ir [7:0] $end
    $var wire  8 8 index_reg [7:0] $end
    $var wire  4 + mar_in [3:0] $end
    $var wire 129 2 mem [128:0] $end
    $var wire  1 ) out_a $end
    $var wire  1 ' out_b $end
    $var wire  8 , out_ir [7:0] $end
    $var wire  8 9 out_reg [7:0] $end
    $var wire  1 < reset $end
    $var wire  8 - to_a [7:0] $end
    $var wire  8 . to_b [7:0] $end
    $var wire  8 , to_ir [7:0] $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
0#
0$
0%
0&
0'
0(
0)
b0000 *
b0000 +
b00000000 ,
b00000000 -
b00000000 .
b0000 /
b000 0
b0000 1
b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 2
b00000000 7
b00000000 8
b00000000 9
b00000000 :
1;
0<
b00000000 =
b00000000 >
0?
b00000000 @
b1000 A
b0100 B
b0010 C
b0001 D
b1100 E
b1010 F
b1001 G
b1111 H
#1
0;
#2
1#
b001 0
b0001 1
b000000000000000000000000000000000000000000000000000000000000000000000000000000000000101100010010000001111010001101000010100000100 2
b00000001 :
1;
#3
0;
#4
0#
1$
b0001 +
b00000100 ,
b010 0
b00000100 9
b00000000 :
1;
#5
0;
#6
0$
1%
b0100 /
b011 0
b00001000 7
1;
#7
0;
#8
0%
b10000101 ,
b100 0
b00100000 8
1;
#9
0;
#10
b101 0
b00100100 9
1;
#11
0;
#12
b000 0
1;
#13
0;
#14
1#
b001 0
b0010 1
b00000010 :
1;
#15
0;
#16
0#
1$
b0010 +
b010 0
b00000000 :
1;
#17
0;
#18
0$
1%
b1000 *
b0101 /
b011 0
b00010000 7
1;
#19
0;
#20
0%
1)
b01000110 ,
b00100100 -
b100 0
b00101000 8
1;
#21
0;
b00100100 =
#22
0)
b00000000 -
b101 0
b00010110 9
1;
#23
0;
#24
b000 0
1;
#25
0;
#26
1#
b001 0
b0011 1
b00000011 :
1;
#27
0;
#28
0#
1$
b0011 +
b010 0
b00000000 :
1;
#29
0;
#30
0$
1%
b0100 *
b0110 /
b011 0
b00011000 7
1;
#31
0;
#32
0%
1'
b00001111 ,
b00010110 .
b100 0
b00110000 8
1;
#33
0;
b00010110 >
#34
0'
b00000000 .
b101 0
b00000000 9
1;
#35
0;
#36
b000 0
1;
#37
0;
#38
1#
b001 0
b0100 1
b00000100 :
1;
#39
0;
#40
0#
1$
b0100 +
b010 0
b00000000 :
1;
#41
0;
#42
0$
1%
b0000 *
b1111 /
b011 0
b00100000 7
1;
#43
0;
#44
0%
b00100100 ,
b100 0
b01111000 8
1;
#45
0;
#46
b101 0
1;
#47
0;
#48
b000 0
1;
#49
0;
#50
1#
b001 0
b0101 1
b00000101 :
1;
#51
0;
#52
0#
1$
b0101 +
b010 0
b00000000 :
1;
#53
0;
#54
0$
1%
b0010 *
b0100 /
b011 0
b00101000 7
1;
#55
0;
#56
0%
b00010110 ,
b100 0
b00100000 8
1;
#57
0;
#58
b101 0
b00100100 9
1;
#59
0;
#60
b000 0
1;
#61
0;
#62
1#
b001 0
b0110 1
b00000110 :
1;
#63
0;
#64
0#
1$
b0110 +
b010 0
b00000000 :
1;
#65
0;
#66
0$
1%
b0001 *
b0110 /
b011 0
b00110000 7
1;
#67
0;
#68
0%
b00000000 ,
b100 0
b00110000 8
1;
#69
0;
#70
b101 0
b00000000 9
1;
#71
0;
#72
b000 0
1;
#73
0;
#74
1#
b001 0
b0111 1
b00000111 :
1;
#75
0;
#76
0#
1$
b0111 +
b010 0
b00000000 :
1;
#77
0;
#78
0$
1%
b0000 *
b0000 /
b011 0
b00111000 7
1;
#79
0;
#80
0%
b100 0
b00000000 8
1;
#81
0;
#82
b101 0
b00000100 9
1;
#83
0;
#84
b000 0
1;
#85
0;
#86
1#
b001 0
b1000 1
b00001000 :
1;
#87
0;
#88
0#
1$
b1000 +
b010 0
b00000000 :
1;
#89
0;
#90
0$
1%
b011 0
b01000000 7
1;
#91
0;
#92
0%
b100 0
1;
#93
0;
#94
b101 0
1;
#95
0;
#96
b000 0
1;
#97
0;
#98
1#
b001 0
b1001 1
b00001001 :
1;
#99
0;
