$version Generated by VerilatedVcd $end
$timescale 1ps $end

 $scope module TOP $end
  $var wire  8 A bus_i [7:0] $end
  $var wire  1 B clk $end
  $var wire  1 C reset $end
  $scope module top $end
   $var wire  8 > a_calc [7:0] $end
   $var wire  1 E a_out $end
   $var wire  1 * ad $end
   $var wire  4 2 address_ir [3:0] $end
   $var wire  8 ? b_calc [7:0] $end
   $var wire  1 E b_out $end
   $var wire  8 F bus_d [7:0] $end
   $var wire  8 A bus_i [7:0] $end
   $var wire  8 @ c_calc [7:0] $end
   $var wire  1 E c_out $end
   $var wire  1 D c_out_acc $end
   $var wire  1 B clk $end
   $var wire  1 ( in_a $end
   $var wire  1 & in_b $end
   $var wire  1 % ir_a $end
   $var wire  4 , ir_i [3:0] $end
   $var wire  1 $ mar_a $end
   $var wire  1 ) out_a $end
   $var wire  1 ' out_b $end
   $var wire  1 E out_bus $end
   $var wire  1 # pc_a $end
   $var wire  1 C reset $end
   $var wire  1 + sb $end
   $var wire  8 / to_a [7:0] $end
   $var wire  8 1 to_acc [7:0] $end
   $var wire  8 0 to_b [7:0] $end
   $var wire  8 . to_ir [7:0] $end
   $var wire  4 - to_ram [3:0] $end
   $scope module accumulator $end
    $var wire  8 @ areg [7:0] $end
    $var wire  8 F bus_d [7:0] $end
    $var wire  1 B clk $end
    $var wire  8 1 from_ram [7:0] $end
    $var wire  1 E out_b $end
    $var wire  1 D ram_in $end
    $var wire  8 @ to_c [7:0] $end
   $upscope $end
   $scope module alu $end
    $var wire  1 * ad $end
    $var wire  8 F bus_d [7:0] $end
    $var wire  1 B clk $end
    $var wire  8 > from_a [7:0] $end
    $var wire  8 ? from_b [7:0] $end
    $var wire  8 3 out [7:0] $end
    $var wire  1 + sub $end
    $var wire  8 1 to_acc [7:0] $end
   $upscope $end
   $scope module areg $end
    $var wire  8 > areg [7:0] $end
    $var wire  8 F bus_d [7:0] $end
    $var wire  1 B clk $end
    $var wire  8 / from_ram [7:0] $end
    $var wire  1 E out_b $end
    $var wire  1 ) ram_in $end
    $var wire  8 > to_c [7:0] $end
   $upscope $end
   $scope module breg $end
    $var wire  8 ? areg [7:0] $end
    $var wire  8 F bus_d [7:0] $end
    $var wire  1 B clk $end
    $var wire  8 0 from_ram [7:0] $end
    $var wire  1 E out_b $end
    $var wire  1 ' ram_in $end
    $var wire  8 ? to_c [7:0] $end
   $upscope $end
   $scope module control $end
    $var wire  4 I OP_ADD [3:0] $end
    $var wire  4 L OP_DIV [3:0] $end
    $var wire  4 N OP_HLT [3:0] $end
    $var wire  4 M OP_JMP [3:0] $end
    $var wire  4 G OP_LDA [3:0] $end
    $var wire  4 H OP_LDB [3:0] $end
    $var wire  4 K OP_MUL [3:0] $end
    $var wire  4 J OP_SUB [3:0] $end
    $var wire  1 * ad $end
    $var wire  1 E aflag $end
    $var wire  8 F bus_d [7:0] $end
    $var wire  8 A bus_i [7:0] $end
    $var wire  1 B clk $end
    $var wire  1 ( in_a $end
    $var wire  1 & in_b $end
    $var wire  1 % ir_a $end
    $var wire  4 , ir_i [3:0] $end
    $var wire  1 $ mar_a $end
    $var wire  1 ) out_a $end
    $var wire  1 ' out_b $end
    $var wire  1 # pc_a $end
    $var wire  1 C reset $end
    $var wire  1 + sb $end
    $var wire  3 4 stagecount [2:0] $end
   $upscope $end
   $scope module counter $end
    $var wire  8 A bus_i [7:0] $end
    $var wire  1 B clk $end
    $var wire  4 5 pc [3:0] $end
    $var wire  1 # pc_a $end
    $var wire  1 C reset $end
   $upscope $end
   $scope module ir $end
    $var wire  4 2 address [3:0] $end
    $var wire  8 A bus_i [7:0] $end
    $var wire  1 B clk $end
    $var wire  8 . from_ram [7:0] $end
    $var wire  4 , instruction [3:0] $end
    $var wire  1 % ir_a $end
    $var wire  1 C reset $end
    $var wire  4 , to_ctrl [3:0] $end
    $var wire  4 2 to_ram [3:0] $end
   $upscope $end
   $scope module mar $end
    $var wire  4 - address [3:0] $end
    $var wire  8 A bus_i [7:0] $end
    $var wire  1 B clk $end
    $var wire  4 2 from_ir [3:0] $end
    $var wire  1 $ mar_a $end
    $var wire  1 C reset $end
    $var wire  4 - to_ram [3:0] $end
   $upscope $end
   $scope module ram $end
    $var wire  4 2 address_ir [3:0] $end
    $var wire  1 B clk $end
    $var wire  1 ( in_a $end
    $var wire  1 & in_b $end
    $var wire  8 ; index_ir [7:0] $end
    $var wire  8 < index_reg [7:0] $end
    $var wire  4 - mar_in [3:0] $end
    $var wire 129 6 mem [128:0] $end
    $var wire  1 ) out_a $end
    $var wire  1 ' out_b $end
    $var wire  8 . out_ir [7:0] $end
    $var wire  8 = out_reg [7:0] $end
    $var wire  1 C reset $end
    $var wire  8 / to_a [7:0] $end
    $var wire  8 0 to_b [7:0] $end
    $var wire  8 . to_ir [7:0] $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
0#
0$
0%
0&
0'
0(
0)
0*
0+
b0000 ,
b0000 -
b00000000 .
b00000000 /
b00000000 0
b00000000 1
b0000 2
b00000000 3
b000 4
b0000 5
b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 6
b00000000 ;
b00000000 <
b00000000 =
b00000000 >
b00000000 ?
b00000000 @
b00000000 A
1B
0C
1D
0E
b00000000 F
b1000 G
b0100 H
b0010 I
b0001 J
b1100 K
b1010 L
b1001 M
b1111 N
#1
0B
#2
1#
b001 4
b0001 5
b000000000000000000000000000000000000000000000000000000000000000000000000000000000000011100000110000101111010001101000010100000100 6
b00000001 A
1B
#3
0B
#4
0#
1$
b0001 -
b00000100 .
b010 4
b00000100 =
b00000000 A
1B
#5
0B
#6
0$
1%
b0100 2
b011 4
b00001000 ;
1B
#7
0B
#8
0%
b10000101 .
b100 4
b00100000 <
1B
#9
0B
#10
b101 4
b00001100 =
1B
#11
0B
#12
b000 4
1B
#13
0B
#14
1#
b001 4
b0010 5
b00000010 A
1B
#15
0B
#16
0#
1$
b0010 -
b010 4
b00000000 A
1B
#17
0B
#18
0$
1%
b1000 ,
b0101 2
b011 4
b00010000 ;
1B
#19
0B
#20
0%
1)
b01000110 .
b00001100 /
b100 4
b00101000 <
1B
#21
b00001100 >
0B
#22
0)
b00000000 /
b101 4
b00001110 =
1B
#23
0B
#24
b000 4
1B
#25
0B
#26
1#
b001 4
b0011 5
b00000011 A
1B
#27
0B
#28
0#
1$
b0011 -
b010 4
b00000000 A
1B
#29
0B
#30
0$
1%
b0100 ,
b0110 2
b011 4
b00011000 ;
1B
#31
0B
#32
0%
1'
b00101111 .
b00001110 0
b100 4
b00110000 <
1B
#33
b00001110 ?
0B
#34
0'
b00000000 0
b101 4
b00000000 =
1B
#35
0B
#36
b000 4
1B
#37
0B
#38
1#
b001 4
b0100 5
b00000100 A
1B
#39
0B
#40
0#
1$
b0100 -
b010 4
b00000000 A
1B
#41
0B
#42
0$
1%
b0010 ,
b1111 2
b011 4
b00100000 ;
1B
#43
0B
#44
0%
1*
b00001100 .
b00011010 3
b100 4
b01111000 <
1B
#45
0B
#46
0*
b00011010 1
b101 4
1B
#47
b00011010 @
0B
#48
b000 4
1B
#49
0B
#50
1#
b001 4
b0101 5
b00000101 A
1B
#51
0B
#52
0#
1$
b0101 -
b010 4
b00000000 A
1B
#53
0B
#54
0$
1%
b0000 ,
b1100 2
b011 4
b00101000 ;
1B
#55
0B
#56
0%
b00001110 .
b100 4
b01100000 <
1B
#57
0B
#58
b101 4
1B
#59
0B
#60
b000 4
1B
#61
0B
#62
1#
b001 4
b0110 5
b00000110 A
1B
#63
0B
#64
0#
1$
b0110 -
b010 4
b00000000 A
1B
#65
0B
#66
0$
1%
b1110 2
b011 4
b00110000 ;
1B
#67
0B
#68
0%
b00000000 .
b100 4
b01110000 <
1B
#69
0B
#70
b101 4
1B
#71
0B
#72
b000 4
1B
#73
0B
#74
1#
b001 4
b0111 5
b00000111 A
1B
#75
0B
#76
0#
1$
b0111 -
b010 4
b00000000 A
1B
#77
0B
#78
0$
1%
b0000 2
b011 4
b00111000 ;
1B
#79
0B
#80
0%
b100 4
b00000000 <
1B
#81
0B
#82
b101 4
b00000100 =
1B
#83
0B
#84
b000 4
1B
#85
0B
#86
1#
b001 4
b1000 5
b00001000 A
1B
#87
0B
#88
0#
1$
b1000 -
b010 4
b00000000 A
1B
#89
0B
#90
0$
1%
b011 4
b01000000 ;
1B
#91
0B
#92
0%
b100 4
1B
#93
0B
#94
b101 4
1B
#95
0B
#96
b000 4
1B
#97
0B
#98
1#
b001 4
b1001 5
b00001001 A
1B
#99
0B
