$version Generated by VerilatedVcd $end
$timescale 1ps $end

 $scope module TOP $end
  $var wire  8 7 bus_i [7:0] $end
  $var wire  1 8 clk $end
  $var wire  1 9 reset $end
  $scope module top $end
   $var wire  1 : a_out $end
   $var wire  4 , address_ir [3:0] $end
   $var wire  8 ; bus_d [7:0] $end
   $var wire  8 7 bus_i [7:0] $end
   $var wire  1 8 clk $end
   $var wire  1 & in_a $end
   $var wire  1 : in_b $end
   $var wire  1 % ir_a $end
   $var wire  4 ( ir_i [3:0] $end
   $var wire  1 $ mar_a $end
   $var wire  1 ' out_a $end
   $var wire  1 : out_b $end
   $var wire  1 : out_bus $end
   $var wire  1 # pc_a $end
   $var wire  1 9 reset $end
   $var wire  8 + to_a [7:0] $end
   $var wire  8 ; to_b [7:0] $end
   $var wire  8 * to_ir [7:0] $end
   $var wire  4 ) to_ram [3:0] $end
   $scope module areg $end
    $var wire  8 - areg [7:0] $end
    $var wire  8 ; bus_d [7:0] $end
    $var wire  1 8 clk $end
    $var wire  8 + from_ram [7:0] $end
    $var wire  1 : out_b $end
    $var wire  1 ' ram_in $end
   $upscope $end
   $scope module control $end
    $var wire  4 > OP_ADD [3:0] $end
    $var wire  4 A OP_DIV [3:0] $end
    $var wire  4 C OP_HLT [3:0] $end
    $var wire  4 B OP_JMP [3:0] $end
    $var wire  4 < OP_LDA [3:0] $end
    $var wire  4 = OP_LDB [3:0] $end
    $var wire  4 @ OP_MUL [3:0] $end
    $var wire  4 ? OP_SUB [3:0] $end
    $var wire  1 : aflag $end
    $var wire  8 ; bus_d [7:0] $end
    $var wire  8 7 bus_i [7:0] $end
    $var wire  1 8 clk $end
    $var wire  1 & in_a $end
    $var wire  1 % ir_a $end
    $var wire  4 ( ir_i [3:0] $end
    $var wire  1 $ mar_a $end
    $var wire  1 ' out_a $end
    $var wire  1 # pc_a $end
    $var wire  1 9 reset $end
    $var wire  3 . stagecount [2:0] $end
   $upscope $end
   $scope module counter $end
    $var wire  8 7 bus_i [7:0] $end
    $var wire  1 8 clk $end
    $var wire  4 / pc [3:0] $end
    $var wire  1 # pc_a $end
    $var wire  1 9 reset $end
   $upscope $end
   $scope module ir $end
    $var wire  4 , address [3:0] $end
    $var wire  8 7 bus_i [7:0] $end
    $var wire  1 8 clk $end
    $var wire  8 * from_ram [7:0] $end
    $var wire  4 0 instruction [3:0] $end
    $var wire  1 % ir_a $end
    $var wire  1 9 reset $end
    $var wire  4 ( to_ctrl [3:0] $end
    $var wire  4 , to_ram [3:0] $end
   $upscope $end
   $scope module mar $end
    $var wire  4 ) address [3:0] $end
    $var wire  8 7 bus_i [7:0] $end
    $var wire  1 8 clk $end
    $var wire  4 , from_ir [3:0] $end
    $var wire  1 $ mar_a $end
    $var wire  1 9 reset $end
    $var wire  4 ) to_ram [3:0] $end
   $upscope $end
   $scope module ram $end
    $var wire  4 , address_ir [3:0] $end
    $var wire  1 8 clk $end
    $var wire  1 & in_a $end
    $var wire  1 : in_b $end
    $var wire  8 6 index [7:0] $end
    $var wire  4 ) mar_in [3:0] $end
    $var wire 129 1 mem [128:0] $end
    $var wire  8 * out [7:0] $end
    $var wire  1 ' out_a $end
    $var wire  1 : out_b $end
    $var wire  1 9 reset $end
    $var wire  8 + to_a [7:0] $end
    $var wire  8 ; to_b [7:0] $end
    $var wire  8 * to_ir [7:0] $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
0#
0$
0%
0&
0'
b0000 (
b0000 )
b00000000 *
b00000000 +
b0000 ,
b00000000 -
b000 .
b0000 /
b0000 0
b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 1
b00000000 6
b00000000 7
18
09
0:
b00000000 ;
b1000 <
b0100 =
b0010 >
b0001 ?
b1100 @
b1010 A
b1001 B
b1111 C
#1
08
#2
1#
1$
b001 .
b0001 /
b000000000000000000000000000000000000000000000000000000000000000000000000000000000000010010000000100000010011011111000000110000011 1
b00000001 7
18
#3
08
#4
0#
b0001 )
b10000011 *
b010 .
b00000000 7
18
#5
08
#6
0$
1%
b1000 (
b0000 )
b0011 ,
b011 .
b1000 0
b00001000 6
18
#7
08
#8
0%
1'
b0000 (
b0011 )
b10000001 *
b10000001 +
b100 .
b00000000 6
18
#9
08
#10
b10000011 *
b10000011 +
b0001 ,
b10000001 -
b101 .
b00011000 6
18
#11
08
#12
0'
b0001 )
b00000010 *
b00000000 +
b0011 ,
b000 .
18
#13
08
#14
1#
1$
b0000 )
b0010 ,
b001 .
b0010 /
b00001000 6
b00000010 7
18
#15
08
#16
0#
b0010 )
b10000001 *
b010 .
b00000000 6
b00000000 7
18
#17
08
#18
0$
1%
b1000 (
b10000011 *
b0001 ,
b011 .
b00010000 6
18
#19
08
#20
0%
1'
b0000 (
b0001 )
b01101111 *
b01101111 +
b0011 ,
b00000000 -
b100 .
18
#21
08
#22
b0011 )
b1111 ,
b01101111 -
b101 .
b00001000 6
18
#23
08
#24
0'
b1111 )
b10000001 *
b00000000 +
b000 .
b00011000 6
18
#25
08
#26
1#
1$
b0000 )
b00000010 *
b0001 ,
b001 .
b0011 /
b01111000 6
b00000011 7
18
#27
08
#28
0#
b0011 )
b00000000 *
b0010 ,
b010 .
b00000000 6
b00000000 7
18
#29
08
#30
0$
1%
b0010 )
b10000011 *
b0000 ,
b011 .
b0000 0
b00011000 6
18
#31
08
#32
b1000 (
b0000 )
b00000010 *
b0011 ,
b100 .
b1000 0
b00010000 6
18
#33
08
#34
0%
b0000 (
b0011 )
b01101111 *
b0010 ,
b101 .
b00000000 6
18
#35
08
#36
b0010 )
b10000011 *
b1111 ,
b000 .
b00011000 6
18
#37
08
#38
1#
1$
b0000 )
b00000010 *
b0011 ,
b001 .
b0100 /
b00010000 6
b00000100 7
18
#39
08
#40
0#
b0100 )
b01101111 *
b0010 ,
b010 .
b00000000 6
b00000000 7
18
#41
08
#42
0$
1%
b0110 (
b0010 )
b10000011 *
b1111 ,
b011 .
b0110 0
b00100000 6
18
#43
08
#44
b1000 (
b1111 )
b00000001 *
b0011 ,
b100 .
b1000 0
b00010000 6
18
#45
08
#46
0%
b0000 (
b0011 )
b01101111 *
b0001 ,
b101 .
b01111000 6
18
#47
08
#48
b0001 )
b00000000 *
b1111 ,
b000 .
b00011000 6
18
#49
08
#50
1#
1$
b0000 )
b00000010 *
b0000 ,
b001 .
b0101 /
b00001000 6
b00000101 7
18
#51
08
#52
0#
b0101 )
b10000001 *
b0010 ,
b010 .
b00000000 6
b00000000 7
18
#53
08
#54
0$
1%
b1000 (
b0010 )
b10000011 *
b0001 ,
b011 .
b00101000 6
18
#55
08
#56
0%
1'
b0000 (
b0001 )
b00001001 *
b00001001 +
b0011 ,
b00000000 -
b100 .
b00010000 6
18
#57
08
#58
b0011 )
b01101111 *
b01101111 +
b1001 ,
b00001001 -
b101 .
b00001000 6
18
#59
08
#60
0'
b1001 )
b10000001 *
b00000000 +
b1111 ,
b000 .
b00011000 6
18
#61
08
#62
1#
1$
b0000 )
b00000010 *
b0001 ,
b001 .
b0110 /
b01001000 6
b00000110 7
18
#63
08
#64
0#
b0110 )
b00000000 *
b0010 ,
b010 .
b00000000 6
b00000000 7
18
#65
08
#66
0$
1%
b0010 )
b10000011 *
b0000 ,
b011 .
b0000 0
b00110000 6
18
#67
08
#68
b1000 (
b0000 )
b00000000 *
b0011 ,
b100 .
b1000 0
b00010000 6
18
#69
08
#70
0%
b0000 (
b0011 )
b01101111 *
b0000 ,
b101 .
b00000000 6
18
#71
08
#72
b0000 )
b10000011 *
b1111 ,
b000 .
b00011000 6
18
#73
08
#74
1#
1$
b00000010 *
b0011 ,
b001 .
b0111 /
b00000000 6
b00000111 7
18
#75
08
#76
0#
b0111 )
b10000011 *
b0010 ,
b010 .
b00000000 7
18
#77
08
#78
0$
1%
b1000 (
b0010 )
b0011 ,
b011 .
b00111000 6
18
#79
08
#80
0%
1'
b0000 (
b0011 )
b00000000 *
b00000000 -
b100 .
b00010000 6
18
#81
08
#82
b01101111 *
b01101111 +
b0000 ,
b101 .
b00011000 6
18
#83
08
#84
0'
b0000 )
b00000010 *
b00000000 +
b1111 ,
b000 .
18
#85
08
#86
1#
1$
b0010 ,
b001 .
b1000 /
b00000000 6
b00001000 7
18
#87
08
#88
0#
b1000 )
b10000011 *
b010 .
b00000000 7
18
#89
08
#90
0$
1%
b1000 (
b0010 )
b0011 ,
b011 .
b01000000 6
18
#91
08
#92
0%
1'
b0000 (
b0011 )
b00000000 *
b100 .
b00010000 6
18
#93
08
#94
b01101111 *
b01101111 +
b0000 ,
b101 .
b00011000 6
18
#95
08
#96
0'
b0000 )
b00000010 *
b00000000 +
b1111 ,
b000 .
18
#97
08
#98
1#
1$
b0010 ,
b001 .
b1001 /
b00000000 6
b00001001 7
18
#99
08
