$version Generated by VerilatedVcd $end
$timescale 1ps $end

 $scope module TOP $end
  $var wire  8 3 bus_i [7:0] $end
  $var wire  1 4 clk $end
  $var wire  1 5 reset $end
  $scope module top $end
   $var wire  1 6 a_out $end
   $var wire  8 7 bus_d [7:0] $end
   $var wire  8 3 bus_i [7:0] $end
   $var wire  1 4 clk $end
   $var wire  1 6 in_a $end
   $var wire  1 6 in_b $end
   $var wire  1 % ir_a $end
   $var wire  4 & ir_i [3:0] $end
   $var wire  1 $ mar_a $end
   $var wire  1 6 out_a $end
   $var wire  1 6 out_b $end
   $var wire  1 6 out_bus $end
   $var wire  1 # pc_a $end
   $var wire  1 5 reset $end
   $var wire  8 7 to_a [7:0] $end
   $var wire  8 7 to_b [7:0] $end
   $var wire  8 ( to_ir [7:0] $end
   $var wire  4 ' to_ram [3:0] $end
   $scope module areg $end
    $var wire  8 8 areg [7:0] $end
    $var wire  8 7 bus_d [7:0] $end
    $var wire  1 4 clk $end
    $var wire  8 7 from_ram [7:0] $end
    $var wire  1 6 out_b $end
    $var wire  1 6 ram_in $end
   $upscope $end
   $scope module control $end
    $var wire  4 ; OP_ADD [3:0] $end
    $var wire  4 > OP_DIV [3:0] $end
    $var wire  4 @ OP_HLT [3:0] $end
    $var wire  4 ? OP_JMP [3:0] $end
    $var wire  4 9 OP_LDA [3:0] $end
    $var wire  4 : OP_LDB [3:0] $end
    $var wire  4 = OP_MUL [3:0] $end
    $var wire  4 < OP_SUB [3:0] $end
    $var wire  1 6 aflag $end
    $var wire  8 7 bus_d [7:0] $end
    $var wire  8 3 bus_i [7:0] $end
    $var wire  1 4 clk $end
    $var wire  1 % ir_a $end
    $var wire  4 & ir_i [3:0] $end
    $var wire  1 $ mar_a $end
    $var wire  1 # pc_a $end
    $var wire  1 5 reset $end
    $var wire  3 ) stagecount [2:0] $end
   $upscope $end
   $scope module counter $end
    $var wire  8 3 bus_i [7:0] $end
    $var wire  1 4 clk $end
    $var wire  4 * pc [3:0] $end
    $var wire  1 # pc_a $end
    $var wire  1 5 reset $end
   $upscope $end
   $scope module ir $end
    $var wire  8 3 bus_i [7:0] $end
    $var wire  1 4 clk $end
    $var wire  8 ( from_ram [7:0] $end
    $var wire  4 + instruction [3:0] $end
    $var wire  1 % ir_a $end
    $var wire  1 5 reset $end
    $var wire  4 & to_ctrl [3:0] $end
   $upscope $end
   $scope module mar $end
    $var wire  4 , address [3:0] $end
    $var wire  8 3 bus_i [7:0] $end
    $var wire  1 4 clk $end
    $var wire  1 $ mar_a $end
    $var wire  1 5 reset $end
    $var wire  4 ' to_ram [3:0] $end
   $upscope $end
   $scope module ram $end
    $var wire  1 4 clk $end
    $var wire  1 6 in_a $end
    $var wire  1 6 in_b $end
    $var wire  8 2 index [7:0] $end
    $var wire  4 ' mar_in [3:0] $end
    $var wire 129 - mem [128:0] $end
    $var wire  8 ( out [7:0] $end
    $var wire  1 6 out_a $end
    $var wire  1 6 out_b $end
    $var wire  1 5 reset $end
    $var wire  8 7 to_a [7:0] $end
    $var wire  8 7 to_b [7:0] $end
    $var wire  8 ( to_ir [7:0] $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
0#
0$
0%
b0000 &
b0000 '
b00000000 (
b000 )
b0000 *
b0000 +
b0000 ,
b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 -
b00000000 2
b00000000 3
14
05
06
b00000000 7
b00000000 8
b1000 9
b0100 :
b0010 ;
b0001 <
b1100 =
b1010 >
b1001 ?
b1111 @
#1
04
#2
1#
1$
b001 )
b0001 *
b000000000000000000000000000000000000000000000000000000000000000000000000000000000100010010000000100000010111111110100000100000000 -
b00000001 3
14
#3
04
#4
0#
b0001 '
b010 )
b0001 ,
b00000000 3
14
#5
04
#6
0$
1%
b0000 '
b011 )
14
#7
04
#8
0%
b000 )
14
#9
04
#10
1#
1$
b001 )
b0010 *
b0000 ,
b00001000 2
b00000010 3
14
#11
04
#12
0#
b0010 '
b01000001 (
b010 )
b0010 ,
b00000000 2
b00000000 3
14
#13
04
#14
0$
1%
b0100 &
b0000 '
b00000000 (
b011 )
b0100 +
14
#15
04
#16
0%
b0000 &
b000 )
14
#17
04
#18
1#
1$
b001 )
b0011 *
b0000 ,
b00010000 2
b00000011 3
14
#19
04
#20
0#
b0011 '
b11111111 (
b010 )
b0011 ,
b00000000 2
b00000000 3
14
#21
04
#22
0$
1%
b1111 &
b0000 '
b00000000 (
b011 )
b1111 +
14
#23
04
#24
0%
b0000 &
b000 )
14
#25
04
#26
1#
1$
b001 )
b0100 *
b0000 ,
b00011000 2
b00000100 3
14
#27
04
#28
0#
b0100 '
b00000010 (
b010 )
b0100 ,
b00000000 2
b00000000 3
14
#29
04
#30
0$
1%
b0000 '
b00000000 (
b011 )
b0000 +
14
#31
04
#32
0%
b000 )
14
#33
04
#34
1#
1$
b001 )
b0101 *
b0000 ,
b00100000 2
b00000101 3
14
#35
04
#36
0#
b0101 '
b00000001 (
b010 )
b0101 ,
b00000000 2
b00000000 3
14
#37
04
#38
0$
1%
b0000 '
b00000000 (
b011 )
14
#39
04
#40
0%
b000 )
14
#41
04
#42
1#
1$
b001 )
b0110 *
b0000 ,
b00101000 2
b00000110 3
14
#43
04
#44
0#
b0110 '
b10001001 (
b010 )
b0110 ,
b00000000 2
b00000000 3
14
#45
04
#46
0$
1%
b1000 &
b0000 '
b00000000 (
b011 )
b1000 +
14
#47
04
#48
0%
b0000 &
b000 )
14
#49
04
#50
1#
1$
b001 )
b0111 *
b0000 ,
b00110000 2
b00000111 3
14
#51
04
#52
0#
b0111 '
b010 )
b0111 ,
b00000000 2
b00000000 3
14
#53
04
#54
0$
1%
b0000 '
b011 )
b0000 +
14
#55
04
#56
0%
b000 )
14
#57
04
#58
1#
1$
b001 )
b1000 *
b0000 ,
b00111000 2
b00001000 3
14
#59
04
#60
0#
b1000 '
b010 )
b1000 ,
b00000000 2
b00000000 3
14
#61
04
#62
0$
1%
b0000 '
b011 )
14
#63
04
#64
0%
b000 )
14
#65
04
#66
1#
1$
b001 )
b1001 *
b0000 ,
b01000000 2
b00001001 3
14
#67
04
#68
0#
b1001 '
b010 )
b1001 ,
b00000000 2
b00000000 3
14
#69
04
#70
0$
1%
b0000 '
b011 )
14
#71
04
#72
0%
b000 )
14
#73
04
#74
1#
1$
b001 )
b1010 *
b0000 ,
b01001000 2
b00001010 3
14
#75
04
#76
0#
b1010 '
b010 )
b1010 ,
b00000000 2
b00000000 3
14
#77
04
#78
0$
1%
b0000 '
b011 )
14
#79
04
#80
0%
b000 )
14
#81
04
#82
1#
1$
b001 )
b1011 *
b0000 ,
b01010000 2
b00001011 3
14
#83
04
#84
0#
b1011 '
b010 )
b1011 ,
b00000000 2
b00000000 3
14
#85
04
#86
0$
1%
b0000 '
b011 )
14
#87
04
#88
0%
b000 )
14
#89
04
#90
1#
1$
b001 )
b1100 *
b0000 ,
b01011000 2
b00001100 3
14
#91
04
#92
0#
b1100 '
b010 )
b1100 ,
b00000000 2
b00000000 3
14
#93
04
#94
0$
1%
b0000 '
b011 )
14
#95
04
#96
0%
b000 )
14
#97
04
#98
1#
1$
b001 )
b1101 *
b0000 ,
b01100000 2
b00001101 3
14
#99
04
