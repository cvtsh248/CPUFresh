$version Generated by VerilatedVcd $end
$timescale 1ps $end

 $scope module TOP $end
  $var wire  8 4 bus_i [7:0] $end
  $var wire  1 5 clk $end
  $var wire  1 6 reset $end
  $scope module top $end
   $var wire  8 8 bus_d [7:0] $end
   $var wire  8 4 bus_i [7:0] $end
   $var wire  1 5 clk $end
   $var wire  1 7 in_a $end
   $var wire  1 7 in_b $end
   $var wire  1 % ir_a $end
   $var wire  4 & ir_i [3:0] $end
   $var wire  1 $ mar_a $end
   $var wire  1 7 out_a $end
   $var wire  1 7 out_b $end
   $var wire  1 # pc_a $end
   $var wire  1 6 reset $end
   $var wire  8 9 to_a [7:0] $end
   $var wire  8 9 to_b [7:0] $end
   $var wire  8 ( to_ir [7:0] $end
   $var wire  4 ' to_ram [3:0] $end
   $scope module control $end
    $var wire  4 < OP_ADD [3:0] $end
    $var wire  4 ? OP_DIV [3:0] $end
    $var wire  4 A OP_HLT [3:0] $end
    $var wire  4 @ OP_JMP [3:0] $end
    $var wire  4 : OP_LDA [3:0] $end
    $var wire  4 ; OP_LDB [3:0] $end
    $var wire  4 > OP_MUL [3:0] $end
    $var wire  4 = OP_SUB [3:0] $end
    $var wire  1 * aflag $end
    $var wire  8 8 bus_d [7:0] $end
    $var wire  8 4 bus_i [7:0] $end
    $var wire  1 5 clk $end
    $var wire  1 % ir_a $end
    $var wire  4 & ir_i [3:0] $end
    $var wire  1 $ mar_a $end
    $var wire  1 # pc_a $end
    $var wire  1 6 reset $end
    $var wire  3 ) stagecount [2:0] $end
   $upscope $end
   $scope module counter $end
    $var wire  8 4 bus_i [7:0] $end
    $var wire  1 5 clk $end
    $var wire  4 + pc [3:0] $end
    $var wire  1 # pc_a $end
    $var wire  1 6 reset $end
   $upscope $end
   $scope module ir $end
    $var wire  8 4 bus_i [7:0] $end
    $var wire  1 5 clk $end
    $var wire  8 ( from_ram [7:0] $end
    $var wire  4 , instruction [3:0] $end
    $var wire  1 % ir_a $end
    $var wire  1 6 reset $end
    $var wire  4 & to_ctrl [3:0] $end
   $upscope $end
   $scope module mar $end
    $var wire  4 - address [3:0] $end
    $var wire  8 4 bus_i [7:0] $end
    $var wire  1 5 clk $end
    $var wire  1 $ mar_a $end
    $var wire  1 6 reset $end
    $var wire  4 ' to_ram [3:0] $end
   $upscope $end
   $scope module ram $end
    $var wire  1 5 clk $end
    $var wire  1 7 in_a $end
    $var wire  1 7 in_b $end
    $var wire  8 3 index [7:0] $end
    $var wire  4 ' mar_in [3:0] $end
    $var wire 129 . mem [128:0] $end
    $var wire  8 ( out [7:0] $end
    $var wire  1 7 out_a $end
    $var wire  1 7 out_b $end
    $var wire  1 6 reset $end
    $var wire  8 9 to_a [7:0] $end
    $var wire  8 9 to_b [7:0] $end
    $var wire  8 ( to_ir [7:0] $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
0#
0$
0%
b0000 &
b0000 '
b00000000 (
b000 )
0*
b0000 +
b0000 ,
b0000 -
b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 .
b00000000 3
b00000000 4
15
06
07
b00000000 8
b00000000 9
b1000 :
b0100 ;
b0010 <
b0001 =
b1100 >
b1010 ?
b1001 @
b1111 A
#1
05
#2
1#
1$
b001 )
b0001 +
b000000000000000000000000000000000000000000000000000000000000000000000000000000000100010010000000100000010111111110100000100000000 .
b00000001 4
15
#3
05
#4
0#
b0001 '
b010 )
b0001 -
b00000000 4
15
#5
05
#6
0$
1%
b0000 '
b011 )
15
#7
05
#8
0%
b000 )
15
#9
05
#10
1#
1$
b001 )
b0010 +
b0000 -
b00001000 3
b00000010 4
15
#11
05
#12
0#
b0010 '
b01000001 (
b010 )
b0010 -
b00000000 3
b00000000 4
15
#13
05
#14
0$
1%
b0100 &
b0000 '
b00000000 (
b011 )
b0100 ,
15
#15
05
#16
0%
b0000 &
b000 )
15
#17
05
#18
1#
1$
b001 )
b0011 +
b0000 -
b00010000 3
b00000011 4
15
#19
05
#20
0#
b0011 '
b11111111 (
b010 )
b0011 -
b00000000 3
b00000000 4
15
#21
05
#22
0$
1%
b1111 &
b0000 '
b00000000 (
b011 )
b1111 ,
15
#23
05
#24
0%
b0000 &
b000 )
15
#25
05
#26
1#
1$
b001 )
b0100 +
b0000 -
b00011000 3
b00000100 4
15
#27
05
#28
0#
b0100 '
b00000010 (
b010 )
b0100 -
b00000000 3
b00000000 4
15
#29
05
#30
0$
1%
b0000 '
b00000000 (
b011 )
b0000 ,
15
#31
05
#32
0%
b000 )
15
#33
05
#34
1#
1$
b001 )
b0101 +
b0000 -
b00100000 3
b00000101 4
15
#35
05
#36
0#
b0101 '
b00000001 (
b010 )
b0101 -
b00000000 3
b00000000 4
15
#37
05
#38
0$
1%
b0000 '
b00000000 (
b011 )
15
#39
05
#40
0%
b000 )
15
#41
05
#42
1#
1$
b001 )
b0110 +
b0000 -
b00101000 3
b00000110 4
15
#43
05
#44
0#
b0110 '
b10001001 (
b010 )
b0110 -
b00000000 3
b00000000 4
15
#45
05
#46
0$
1%
b1000 &
b0000 '
b00000000 (
b011 )
b1000 ,
15
#47
05
#48
0%
b0000 &
b000 )
15
#49
05
#50
1#
1$
b001 )
b0111 +
b0000 -
b00110000 3
b00000111 4
15
#51
05
#52
0#
b0111 '
b010 )
b0111 -
b00000000 3
b00000000 4
15
#53
05
#54
0$
1%
b0000 '
b011 )
1*
b0000 ,
15
#55
05
#56
0%
b000 )
15
#57
05
#58
1#
1$
b001 )
b1000 +
b0000 -
b00111000 3
b00001000 4
15
#59
05
#60
0#
b1000 '
b010 )
b1000 -
b00000000 3
b00000000 4
15
#61
05
#62
0$
1%
b0000 '
b011 )
15
#63
05
#64
0%
b000 )
15
#65
05
#66
1#
1$
b001 )
b1001 +
b0000 -
b01000000 3
b00001001 4
15
#67
05
#68
0#
b1001 '
b010 )
b1001 -
b00000000 3
b00000000 4
15
#69
05
#70
0$
1%
b0000 '
b011 )
15
#71
05
#72
0%
b000 )
15
#73
05
#74
1#
1$
b001 )
b1010 +
b0000 -
b01001000 3
b00001010 4
15
#75
05
#76
0#
b1010 '
b010 )
b1010 -
b00000000 3
b00000000 4
15
#77
05
#78
0$
1%
b0000 '
b011 )
15
#79
05
#80
0%
b000 )
15
#81
05
#82
1#
1$
b001 )
b1011 +
b0000 -
b01010000 3
b00001011 4
15
#83
05
#84
0#
b1011 '
b010 )
b1011 -
b00000000 3
b00000000 4
15
#85
05
#86
0$
1%
b0000 '
b011 )
15
#87
05
#88
0%
b000 )
15
#89
05
#90
1#
1$
b001 )
b1100 +
b0000 -
b01011000 3
b00001100 4
15
#91
05
#92
0#
b1100 '
b010 )
b1100 -
b00000000 3
b00000000 4
15
#93
05
#94
0$
1%
b0000 '
b011 )
15
#95
05
#96
0%
b000 )
15
#97
05
#98
1#
1$
b001 )
b1101 +
b0000 -
b01100000 3
b00001101 4
15
#99
05
